/* C program to implement queues using two stacks */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int value;
    struct node *next;
};
void push(struct node** top, int value);
int pop(struct node** top);
struct queue
{
    struct node *stack1;
    struct node *stack2;
};
/* Function to enqueue an element into the queue using stack */
void enqueue(struct queue *q, int x)
{
    push(&q->stack1, x);
}
/* Function to dequeue an element from the queue using stack */
void dequeue(struct queue *q)
{
    int y;
    if (q->stack1 == NULL && q->stack2 == NULL) {
        printf("queue is empty");
        return;
    }
    if (q->stack2 == NULL) {
        while (q->stack1 != NULL) {
        y = pop(&q->stack1);
        push(&q->stack2, y);
        }
    }
    y = pop(&q->stack2);
    printf("%d\n", y);
}
/* Function to push an element to stack */
void push(struct node** top, int value)
{
    struct node* newnode = (struct node*) malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Stack overflow \n");
            return;
        }
    newnode->value = value;
    newnode->next = (*top);
    (*top) = newnode;
}
/* Function to pop element from stack */
int pop(struct node** top)
{
    int buff;
    struct node *t;
    if (*top == NULL) {
        printf("Stack underflow \n");
        return 0;
    }
    else {
        t = *top;
        buff = t->value;
        *top = t->next;
        free(t);
        return buff;
    }
}
/*Function to display the elements in the queue*/
void display(struct node *top1,struct node *top2)
{
    while (top1 != NULL) {
        printf("%d\n", top1->value);
        top1 = top1->next;
    }
    while (top2 != NULL) {
        printf("%d\n", top2->value);
        top2 = top2->next;
    }
}
/* Main Function */
int main()
{
    struct queue *q = (struct queue*)malloc(sizeof(struct queue));
    int v = 0, k;
    char vk = 'y';
    q->stack1 = NULL;
    q->stack2 = NULL;
    while (vk == 'y'||vk == 'Y') {
        printf("\nenter ur choice\n1.ENQUEUE\n2.DEQUEUE\n3.display\n4.exit\n");
        scanf("%d", &v);
        switch(v) {
            case 1 : printf("enter the element to be added to queue\n");
                     scanf("%d", &k);
                     enqueue(q, k);
                     break;
            case 2 : dequeue(q);
                     break;
            case 3 : display(q->stack1, q->stack2);
                     break;
            case 4 : exit(1);
                     break;
            default : printf("invalid\n");
                      break;
        }
    }
}
